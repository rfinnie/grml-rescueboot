#!/bin/sh
# Filename:      loopback-iso
# Purpose:       grub-mkconfig helper script for loopback.cfg-compatible ISOs
# Authors:       Grml team (grml.org), (c) Andreas Gredler <jimmy@grml.org>, Michael Prokop <mika@grml.org>
# License:       This file is licensed under the GPL v2+.
################################################################################

set -e

prefix=/usr
exec_prefix=${prefix}
bindir=${exec_prefix}/bin
libdir=${exec_prefix}/lib

progname="loopback-iso"
default_file="/etc/default/grub"
default_dir="/etc/default/grub.d"

if [ -r ${libdir}/grub/grub-mkconfig_lib ] ; then
  . ${libdir}/grub/grub-mkconfig_lib
elif [ -r /usr/share/grub/grub-mkconfig_lib ] ; then # fallback for e.g. Fedora
  . /usr/share/grub/grub-mkconfig_lib
else
  echo "${progname}: Could not locate file grub-mkconfig_lib, please report a bug." >&2
  exit 0
fi

# Sadly, grub-mkconfig does not export all GRUB_* variables, so we
# must re-source the default files.
for cfg in "${default_file}" "${default_dir}"/*.cfg ; do
  if test -r "${cfg}"; then
    . "${cfg}"
  fi
done

# Support grml-rescueboot-specific configuration location / variable names
if [ -r /etc/default/grml-rescueboot ] ; then
  . /etc/default/grml-rescueboot
  GRUB_LOOPBACK_ISO_PARAMS="${CUSTOM_BOOTOPTIONS}"
  if [ -n "${ISO_LOCATION}" ]; then
    GRUB_LOOPBACK_ISO_LOCATION="${ISO_LOCATION}"
  elif [ -d /boot/grml ]; then
    GRUB_LOOPBACK_ISO_LOCATION="/boot/grml"
  fi
fi

if [ -n "${GRUB_LOOPBACK_ISO_LOCATION}" ] && [ ! -d "${GRUB_LOOPBACK_ISO_LOCATION}" ]; then
  # If explicitly provided but does not exist, exit 0
  echo "${progname}: Cannot find ${GRUB_LOOPBACK_ISO_LOCATION}" >&2
  exit 0
elif [ -d /boot/loopback-iso ]; then
  GRUB_LOOPBACK_ISO_LOCATION="/boot/loopback-iso"
else
  # Exit silently if there's nothing to do
  exit 0
fi

resolve_dm_name() {
  retval="$1"
  base=${1##*/}
  for block in /sys/block /sys/class/block ; do
    [ ! -d ${block}/${base}/dm ] && continue
    retval="/dev/mapper/$(cat ${block}/${base}/dm/name)"
    break
  done
  case "$retval" in
    /dev/dm-*)
    minor=${retval##*-}
   retval="/dev/mapper/$(dmsetup info -C --noheadings -o name -j 253 -m $minor)"
    ;;
  esac

  echo "$retval"
}

get_dependencies() {
  device=${1}
  if [ -z ${device} ] ; then
    return
  fi
  device=$(readlink -f ${device})
  case "$device" in
    /dev/mapper/*)
    device="/dev/dm-$(dmsetup info -C --noheadings -o minor "$device")"
    ;;
  esac

  base=${device##*/}
  dependencies=""
  additional_dependencies=""
  for block in /sys/block /sys/class/block ; do
    [ ! -d ${block}/${base}/slaves ] && continue
    for file in  ${block}/${base}/slaves/* ; do
      dep_name="/dev/${file##*/}"
      dep_name=$(resolve_dm_name ${dep_name})

      # resolve recursively all dependencies
      additional_dependencies=$(get_dependencies ${dep_name})

      dependencies="$dependencies $additional_dependencies $dep_name"
    done
    break
  done
  echo $dependencies

}



for iso in "${GRUB_LOOPBACK_ISO_LOCATION}"/*.iso ; do
  if ! grub_file_is_not_garbage "${iso}" ; then
    continue
  fi
  rel_dirname="$(dirname "$(make_system_path_relative_to_its_root "${iso}")")"
  iso_base="$(basename "${iso}")"
  device="$(${grub_probe} -t device "${iso}")"

  additional_param=""

  case "$device" in
    /dev/mapper*|/dev/md*)
      dependencies=$(get_dependencies ${device})
      dep_string=""
      for dep in $dependencies $device ; do
        dep_string="$dep_string,$dep"
      done
      dep_string=${dep_string#,}
      additional_param="live-media=$dep_string"
    ;;
  esac

  if [ "$(echo "${iso_base}" | awk '{print substr($0, 1, 4)}')" = "grml" ]; then
    title_type="Grml Rescue System image"
  else
    title_type="ISO image"
  fi
  echo "${progname}: Found ${title_type}: ${iso}" >&2
  title="${title_type} (${iso_base})"
  grub_prep=$(prepare_grub_to_access_device "$device" | sed -e "s/^/        /")

  cat << EOF
menuentry "${title}" {
${grub_prep}
        iso_path="${rel_dirname%/}/${iso_base}"
        export iso_path
        kernelopts=" ${GRUB_LOOPBACK_ISO_PARAMS} ${additional_param} "
        export kernelopts
        loopback loop "${rel_dirname%/}/${iso_base}"
        set root=(loop)
        configfile /boot/grub/loopback.cfg
}
EOF
done

## END OF FILE #################################################################
